version 1;
version glsl 330 core;

func distribution_ggx_tr(vec3 N, vec3 H, float a): float probability
<<<
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotHSq = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotHSq * (a2 - 1.0) + 1);
    float pi = 3.1415926535897932384626433832795;
    denom = pi * denom * denom;

    probability = nom / denom;
>>>;

func fresnel_schlick(float cosTheta, vec3 F0): vec3 fresnel
<<<
    fresnel = F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
>>>;

func geometry_schlick_ggx(float NdotV, float k): float probability
<<<
    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;
    probability = nom / denom;
>>>;

func geometry_smith(vec3 N, vec3 V, vec3 L, float k): float probability
<<<
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = geometry_schlick_ggx(NdotV, k);
    float ggx2 = geometry_schlick_ggx(NdotL, k);
    probability = ggx1 * ggx2;
>>> requires { geometry_schlick_ggx };

func RadicalInverseVdC(uint bits): float result
<<<
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    result = float(bits) * 2.3283064365386963e-10; // / 0x100000000
>>>;

func Hammersley(uint i, uint N): vec2 result
<<<
    result = vec2(float(i)/float(N), RadicalInverseVdC(i));
>>> requires { RadicalInverseVdC };

func ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness): vec3 result
<<<
    float a = roughness*roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
>>>;

func integrate_brdf(float NdotV, float roughness): vec2 result
<<<
    // source from learnopengl.com

    vec3 V;
    V.x = sqrt(1.0 - NdotV*NdotV);
    V.y = 0.0;
    V.z = NdotV;

    float A = 0.0;
    float B = 0.0;

    vec3 N = vec3(0.0, 0.0, 1.0);

    const uint SAMPLE_COUNT = 1024u;
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if(NdotL > 0.0)
        {
            float k = (roughness*roughness)/2.0;
            float G = geometry_smith(N, V, L, k);
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }

    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);
    result = vec2(A, B);
>>> requires {
    Hammersley,
    ImportanceSampleGGX,
    geometry_smith
};
