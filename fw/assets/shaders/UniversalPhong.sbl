version 1;
version glsl 330 core;

include "PBR.sbl";

shader "Uniform Phong Shader"
{
    shared
    <<<
        uniform sampler2D AlbedoMapSampler;
        uniform sampler2D NormalMapSampler;
        uniform sampler2D MetalnessMapSampler;
        uniform sampler2D RoughnessMapSampler;

        uniform samplerCube PrefilterMap;
        uniform sampler2D BRDF_LUT;

        uniform samplerCube IrradianceMap;

        uniform vec3 EmissionColor;
        uniform vec4 SolidColor;
        uniform vec4 DiffuseMapColor;

        uniform vec3 LightColor;
        uniform vec3 LightPosition;
        uniform vec3 LightDirection;

        uniform mat4 model;
        uniform mat4 view;
        uniform mat4 projection;

        const float PI = 3.14159265359;
    >>>;

    struct vertexLayout
    {
        vec3 position {location = 0},
        vec3 texCoord {location = 1},
        vec3 normal   {location = 2},
        vec3 tangent  {location = 3}
    };

    struct vertexOutput
    {
        vec3 Normal,
        vec3 Tangent,
        vec2 TexCoord,
        vec3 ViewDirection,
        vec3 ViewLightDirection
    };

    func vertex(vertexLayout vertex): vertexOutput result
    <<<
        vec4 viewPosition = view * model * vec4(vertex.position, 1.0f);
        gl_Position = projection * viewPosition;

        result.TexCoord = vertex.texCoord.xy;

        mat3 normalMatrix = transpose(inverse(mat3(model)));
        mat3 viewNormalMtx = mat3(view) * normalMatrix;

        vec4 viewLightPosition = view * vec4(LightPosition, 1.0);
        vec3 viewLightDirection = normalize(
            viewLightPosition.xyz - viewPosition.xyz
        );

        result.Normal = normalize(viewNormalMtx * vertex.normal);
        result.Tangent = normalize(viewNormalMtx * vertex.tangent);

        result.ViewDirection = normalize(-viewPosition.xyz);
        result.ViewLightDirection = viewLightDirection;
    >>>;

    func fragment(vertexOutput vsOut): vec4 result
    <<<
        vec3 normal = normalize(vsOut.Normal);
        vec3 tangent = normalize(vsOut.Tangent);
        vec3 lightDir = normalize(vsOut.ViewLightDirection);
        vec3 viewDir = normalize(vsOut.ViewDirection);

        vec4 albedoMapSample = texture(AlbedoMapSampler, vsOut.TexCoord);
        vec4 normalMapSample = texture(NormalMapSampler, vsOut.TexCoord);
        vec4 metalnessMapSample = texture(MetalnessMapSampler, vsOut.TexCoord);
        vec4 roughnessMapSample = texture(RoughnessMapSampler, vsOut.TexCoord);

        float metalness = metalnessMapSample.r;
        float roughness = roughnessMapSample.r;

        vec3 surfaceNormalTS = normalMapSample.rgb * 2.0 - 1.0;
        tangent = normalize(tangent - dot(tangent, normal) * normal);
        vec3 binormal = cross(normal, tangent);
        mat3 TBN = mat3(tangent, binormal, normal);
        vec3 surfaceNormal = normalize(TBN * surfaceNormalTS);

        vec3 worldSurfaceNormal = inverse(mat3(view)) * surfaceNormal;

        vec3 albedoMapFinal = albedoMapSample.rgb;
        vec3 albedo = pow(albedoMapFinal, vec3(2.2));
        vec3 F0 = mix(vec3(0.04), albedo, metalness);

        float NdotV = max(dot(surfaceNormal, viewDir), 0.0);

        vec3 Lo = vec3(0.0);

        {
            float NdotL = max(dot(surfaceNormal, lightDir), 0.0);
            vec3 halfwayDir = normalize(viewDir + lightDir);
            vec3 radiance = LightColor;

            float D = distribution_ggx_tr(surfaceNormal, halfwayDir, roughness);
            vec3 F = fresnel_schlick(max(dot(halfwayDir, viewDir), 0.0), F0);

            float G = geometry_smith(
                surfaceNormal,
                viewDir,
                lightDir,
                roughness
            );

            vec3 BRDF = (D * F * G) / (4.0 * NdotV * NdotL + 0.001);

            vec3 kS = F;
            vec3 kD = vec3(1.0) - kS;
            kD *= 1.0 - metalness;

            Lo += (kD * albedo / PI + BRDF) * radiance * NdotL;
        }

        vec3 F = fresnel_schlick(max(dot(surfaceNormal, viewDir), 0.0), F0);

        /* DIFFUSE IBL */
        vec3 kS = fresnel_schlick(max(dot(surfaceNormal, viewDir), 0.0), F0);
        vec3 kD = 1.0 - kS;
        kD *= 1.0 - metalness;
        vec3 irradiance = texture(IrradianceMap, worldSurfaceNormal).rgb;
        vec3 diffuse = irradiance * albedo;

        // SPECULAR IBL
        vec3 R = reflect(-viewDir, surfaceNormal);
        const float MAX_REFLECTION_LOD = 4.0;
        vec3 prefilteredColor = textureLod(
            PrefilterMap,
            inverse(mat3(view)) * R,
            MAX_REFLECTION_LOD * roughness
        ).rgb;

        vec2 envBRDF  = texture(
            BRDF_LUT,
            vec2(max(dot(surfaceNormal, viewDir), 0.0), roughness)
        ).rg;

        vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);

        float ao = 1.0;
        vec3 ambient = (kD * diffuse + specular) * ao;

        vec3 color = Lo + ambient + EmissionColor;
        color = color / (color + vec3(1.0));
        vec3 gammaCorrected = pow(color, vec3(1.0/2.2));
        result = vec4(gammaCorrected, 1.0);
    >>>
    requires {
        distribution_ggx_tr,
        fresnel_schlick,
        geometry_smith
    };
};
