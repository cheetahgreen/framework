version 1;
version glsl 330 core;

func sampleSphericalMap(vec3 v): vec2 uv
<<<
    const vec2 invAtan = vec2(0.1591, 0.3183);
    uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= invAtan;
    uv += 0.5;
>>>;

shader "Equirectangular to Cubemap"
{
    shared
    <<<
        uniform mat4 projection;
        uniform mat4 view;
        uniform sampler2D equirectangularMap;
    >>>;

    struct vertexLayout
    {
        vec3 position {location = 0}
    };

    struct vertexOutput
    {
        vec3 localPosition
    };

    func vertex(vertexLayout vertex): vertexOutput result
    <<<
        result.localPosition = vertex.position;
        mat4 viewProj = projection * view;
        gl_Position =  viewProj * vec4(vertex.position, 1.0);
    >>>;

    func fragment(vertexOutput vsOut): vec4 result
    <<<
        vec2 uv = sampleSphericalMap(normalize(vsOut.localPosition));
        vec3 color = texture(equirectangularMap, uv).rgb;
        result = vec4(color, 1.0);
    >>> requires { sampleSphericalMap };
};
