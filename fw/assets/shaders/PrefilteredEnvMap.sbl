version 1;
version glsl 330 core;

include "PBR.sbl";

shader "Prefiltered Environment Map"
{
    shared
    <<<
        uniform mat4 projection;
        uniform mat4 view;
        uniform samplerCube environmentCubemap;
        float roughness;
        const float PI = 3.14159265359f;
    >>>;

    func vertex(vec3 position {location = 0}): vec3 localPosition
    <<<
        localPosition = position;
        mat4 viewProj = projection * view;
        gl_Position =  viewProj * vec4(position, 1.0);
    >>>;

    func fragment(vec3 localPosition): vec4 result
    <<<
        vec3 N = normalize(localPosition);
        vec3 R = N;
        vec3 V = R;

        const uint SAMPLE_COUNT = 256u;
        float totalWeight = 0.0;
        vec3 prefilteredColor = vec3(0.0);

        for(uint i = 0u; i < SAMPLE_COUNT; ++i)
        {
            vec2 Xi = Hammersley(i, SAMPLE_COUNT);
            vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
            vec3 L  = normalize(2.0 * dot(V, H) * H - V);

            float NdotL = max(dot(N, L), 0.0);
            if(NdotL > 0.0)
            {
                prefilteredColor += texture(environmentCubemap, L).rgb * NdotL;
                totalWeight      += NdotL;
            }
        }

        prefilteredColor = prefilteredColor / totalWeight;
        result = vec4(prefilteredColor, 1.0);
    >>> requires { Hammersley, ImportanceSampleGGX };
};
