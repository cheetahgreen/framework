version 1;
version glsl 330 core;

func blinnPhongSpecular(
    vec3 normalDir,
    vec3 viewDir,
    vec3 lightDir,
    float shininess
): float specularIntensity
<<<
    vec3 halfwayDir = normalize(viewDir + lightDir);
    specularIntensity = pow(max(dot(normalDir, halfwayDir), 0.0), shininess);
>>>;

func D_GGX_TR(vec3 N, vec3 H, float a): float probability
<<<
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotHSq = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotHSq * (a2 - 1.0) + 1);
    float pi = 3.1415926535897932384626433832795;
    denom = pi * denom * denom;

    probability = nom / denom;
>>>;

func fresnelSchlick(float cosTheta, vec3 F0): vec3 fresnel
<<<
    fresnel = F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
>>>;

func geometrySchlickGGX(float NdotV, float k): float probability
<<<
    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;
    probability = nom / denom;
>>>;

func geometrySmith(vec3 N, vec3 V, vec3 L, float k): float probability
<<<
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = geometrySchlickGGX(NdotV, k);
    float ggx2 = geometrySchlickGGX(NdotL, k);
    probability = ggx1 * ggx2;
>>> requires { geometrySchlickGGX };

shader "Uniform Phong Shader"
{
    shared
    <<<
        uniform sampler2D AlbedoMapSampler;
        uniform sampler2D NormalMapSampler;

        uniform vec3 EmissionColor;
        uniform vec4 SolidColor;
        uniform vec4 DiffuseMapColor;

        uniform vec3 LightColor;
        uniform vec3 LightPosition;
        uniform vec3 LightDirection;

        uniform mat4 model;
        uniform mat4 view;
        uniform mat4 projection;
    >>>;

    struct vertexLayout
    {
        vec3 position {location = 0},
        vec3 texCoord {location = 1},
        vec3 normal   {location = 2},
        vec3 tangent  {location = 3}
    };

    struct vertexOutput
    {
        vec3 Normal,
        vec3 Tangent,
        vec2 TexCoord,
        vec3 ViewDirection,
        vec3 ViewLightDirection
    };

    func vertex(vertexLayout vertex): vertexOutput result
    <<<
        vec4 viewPosition = view * model * vec4(vertex.position, 1.0f);
        gl_Position = projection * viewPosition;

        result.TexCoord = vertex.texCoord.xy;

        mat3 normalMatrix = transpose(inverse(mat3(model)));
        mat3 viewNormalMtx = mat3(view) * normalMatrix;

        vec4 viewLightPosition = view * vec4(LightPosition, 1.0);
        vec3 viewLightDirection = normalize(
            viewLightPosition.xyz - viewPosition.xyz
        );

        result.Normal = normalize(viewNormalMtx * vertex.normal);
        result.Tangent = normalize(viewNormalMtx * vertex.tangent);

        result.ViewDirection = normalize(-viewPosition.xyz);
        result.ViewLightDirection = viewLightDirection;
    >>>;

    func fragment(vertexOutput vsOut): vec4 result
    <<<
        vec3 normal = normalize(vsOut.Normal);
        vec3 tangent = normalize(vsOut.Tangent);
        vec3 lightDir = normalize(vsOut.ViewLightDirection);
        vec3 viewDir = normalize(vsOut.ViewDirection);

        vec4 albedoMapSample = texture(AlbedoMapSampler, vsOut.TexCoord);
        vec4 normalMapSample = texture(NormalMapSampler, vsOut.TexCoord);

        vec3 surfaceNormalTS = normalMapSample.rgb * 2.0 - 1.0;
        tangent = normalize(tangent - dot(tangent, normal) * normal);
        vec3 binormal = cross(normal, tangent);
        mat3 TBN = mat3(tangent, binormal, normal);
        vec3 surfaceNormal = normalize(TBN * surfaceNormalTS);

        vec3 albedoMapFinal = albedoMapSample.rgb;
        vec3 albedo = pow(albedoMapFinal, vec3(2.2));

        float NdotV = max(dot(surfaceNormal, viewDir), 0.0);
        float NdotL = max(dot(surfaceNormal, lightDir), 0.0);
        vec3 halfwayDir = normalize(viewDir + lightDir);

        vec3 radiance = LightColor;

        float metalness = 0.0;
        vec3 F0 = mix(vec3(0.04), albedoMapFinal, metalness);

        float D = D_GGX_TR(surfaceNormal, halfwayDir, 0.3);
        float G = geometrySmith(surfaceNormal, viewDir, lightDir, 0.2);
        vec3 F = fresnelSchlick(NdotV, vec3(0.04));

        vec3 BRDF = (D * F * G) / (4.0 * NdotV * NdotL + 0.001);

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;

        const float PI = 3.14159265359;
        vec3 Lo = (kD * albedo / PI + BRDF) * radiance * NdotL;

        Lo = Lo / (Lo + vec3(1.0)) + EmissionColor;
        vec3 gammacorrected = pow(Lo, vec3(1.0/2.2));

        result = vec4(gammacorrected, 1.0);
    >>>
    requires {
        D_GGX_TR,
        fresnelSchlick,
        geometrySmith
    };
};
